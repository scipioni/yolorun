# build image with:
# - yolorun package

# Dockerfile to run ONNXRuntime with TensorRT integration

# nVidia TensorRT Base Image
#ARG TRT_CONTAINER_VERSION=22.12
ARG VERSION=23.08
FROM nvcr.io/nvidia/tensorrt:${VERSION}-py3 AS builder

ARG ONNXRUNTIME_REPO=https://github.com/Microsoft/onnxruntime
ARG ONNXRUNTIME_BRANCH=main
# check with: nvidia-smi --query-gpu=compute_cap --format=csv
ARG CMAKE_CUDA_ARCHITECTURES=37;50;52;60;61;70;75;80  

RUN apt-get update &&\
    apt-get install -y sudo git bash 
#unattended-upgrades
#RUN unattended-upgrade

WORKDIR /code
ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:/code/cmake-3.27.3-linux-x86_64/bin:/opt/miniconda/bin:${PATH}

# # Prepare onnxruntime repository & build onnxruntime with TensorRT
RUN pip install cmake packaging setuptools wheel
RUN git clone --single-branch --branch ${ONNXRUNTIME_BRANCH} --recursive ${ONNXRUNTIME_REPO} onnxruntime &&\
  cd onnxruntime &&\
  ./build.sh --allow_running_as_root --parallel --build_shared_lib --cuda_home /usr/local/cuda --cudnn_home /usr/lib/x86_64-linux-gnu/ \
    --use_tensorrt --tensorrt_home /usr/lib/x86_64-linux-gnu/ --config Release \
    --build_wheel --skip_tests --skip_submodule_sync --cmake_extra_defines '"CMAKE_CUDA_ARCHITECTURES='${CMAKE_CUDA_ARCHITECTURES}'"' 
#     pip install /code/onnxruntime/build/Linux/Release/dist/*.whl

#     /bin/sh onnxruntime/dockerfiles/scripts/install_common_deps.sh &&\
#     trt_version=${TRT_VERSION:0:3} &&\
#     /bin/sh onnxruntime/dockerfiles/scripts/checkout_submodules.sh ${trt_version} &&\
#     cd onnxruntime &&\
#     /bin/sh build.sh --allow_running_as_root --parallel --build_shared_lib --cuda_home /usr/local/cuda --cudnn_home /usr/lib/x86_64-linux-gnu/ --use_tensorrt --tensorrt_home /usr/lib/x86_64-linux-gnu/ --config Release --build_wheel --skip_tests --skip_submodule_sync --cmake_extra_defines '"CMAKE_CUDA_ARCHITECTURES='${CMAKE_CUDA_ARCHITECTURES}'"' &&\
#     pip install /code/onnxruntime/build/Linux/Release/dist/*.whl &&\
#     cd ..


# # serve per cv2.imshow
# RUN \
#   apt-get update && \
#   apt-get install -y -q --no-install-recommends \
#     xcb \ 
#     libglib2.0-0 \
#     libgl1-mesa-glx && \
#   apt-get -y clean && \
#     rm -rf /var/lib/apt/lists/*


FROM nvcr.io/nvidia/tensorrt:${VERSION}-py3 AS pdm

#ARG PYPI_URL=https://pypi.csgalileo.org/simple
# ARG PYPI_USERNAME=galileo
# ARG PYPI_PASSWORD

ENV \
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONDONTWRITEBYTECODE=1 \
  PYTHONHASHSEED=random \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  DEBIAN_FRONTEND=noninteractive \
  LANG=C.UTF-8 \
  LC_ALL=C.UTF-8

RUN pip install setuptools wheel pdm && \
  pdm config python.use_venv false

FROM pdm
ENV QT_X11_NO_MITSHM=1
ARG UID=1000
ARG GID=1000

RUN groupadd --gid ${GID} user \
    && useradd --uid ${UID} --gid ${GID} -m user


WORKDIR /project
COPY pyproject.toml pdm.lock README.md ./

RUN pdm install --prod --no-lock --no-editable --no-isolation
#RUN pdm install -G onnx --no-lock --no-editable --no-isolation
#RUN pip install matplotlib # da togliere
#RUN pdm install -G train --no-lock --no-editable --no-isolation

WORKDIR /app
COPY ./yolorun ./yolorun
RUN mkdir -p /app/pkgs
RUN bash -c "cp -a /project/__pypackages__/3*/* /app/pkgs"

COPY --from=builder /code/onnxruntime/build/Linux/Release/dist/*.whl /tmp
RUN pip install /tmp/*.whl && rm -f /tmp/*whl


ENV PYTHONPATH=/app/pkgs/lib:/app:$PYTHONPATH
ENV PATH=/app/pkgs/bin:$PATH
